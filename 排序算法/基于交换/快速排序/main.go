package main

import (
	"fmt"
	"math/rand"
	"time"
)

func main() {
	numbers := []int{884688278, 387052570, 77481420, 537616843, 659978110, 215386675, 604354651, 64838842, 830623614, 544526209, 292446044, 570872277, 946770900, 411203381, 445747969, 480363996, 31693639, 303753633, 261627544, 884642435, 978672815, 427529125, 111935818, 109686701, 714012242, 691252458, 230964510, 340316511, 917959651, 544069623, 193715454, 631219735, 219297819, 151485185, 986263711, 805374069, 915272981, 493886311, 970466103, 819959858, 733048764, 393354006, 631784130, 70309112, 513023688, 17092337, 698504118, 937296273, 54807658, 353487181, 82447697, 177571868, 830140516, 536343860, 453463919, 998857732, 280992325, 13701823, 728999048, 764532283, 693597252, 433183457, 157540946, 427514727, 768122842, 782703840, 965184299, 586696306, 256184773, 984427390, 695760794, 738644784, 784607555, 433518449, 440403918, 281397572, 546931356, 995773975, 738026287, 861262547, 119093579, 521612397, 306242389, 84356804, 42607214, 462370265, 294497342, 241316335, 158982405, 970050582, 740856884, 784337461, 885254231, 633020080, 641532230, 421701576, 298738196, 918973856, 472147510, 169670404}
	fmt.Printf("--%d\n", len(numbers))
	quickSort(numbers, 0, len(numbers)-1)
	fmt.Println(numbers)
	fmt.Println(len(numbers))
}

/*
快速排序
1.取得左右边界，以便于划分分治的空间
2.随机选择一个数字作为基准
3.将比基准小的放在前面比基准大的放在基准后面
时间复杂度 nlog(n)
*/
func quickSort(li []int, left, right int) {
	// 当左右边界重合时，则排序完成
	if left >= right {
		return
	}
	i := left
	j := right
	rand.Seed(time.Now().Unix())
	r := rand.Intn(right-left) + left
	// 当划分两个子串之后，
	// 在第二个子串中随机选择一个基准其下标索引需要加上第二字串的第一个数字的索引
	// 否则这里会得到第一个子串中的数字
	li[i], li[r] = li[r], li[i]
	// 交换要排序的序列中选择的基准和首元素的位置，防止后面交换位置的时候丢失第一个数
	tmp := li[i] // tmp即为我们选择的基准
	for i < j {
		// 每循环一趟都把基准后面的一个小于基准的数放到基准前面的 i 位置上
		// 把基准前面的一个大于基准的数放在基准后面 j 位置上
		// 直到基准左侧全部小于  右侧全部大于
		// 此时 i 和 j 移动到同一个位置即基准应该在序列中的位置
		for i < j && li[j] >= tmp {
			j--
		}
		li[i] = li[j]
		for i < j && li[i] <= tmp {
			i++
		}
		li[j] = li[i]
	}
	li[i] = tmp // tmp即基准
	quickSort(li, left, i-1)
	quickSort(li, i+1, right)
}
